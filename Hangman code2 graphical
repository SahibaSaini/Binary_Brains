import tkinter as tk
import random

class HangmanGame:
    def __init__(self, master):
        self.master = master
        self.master.title("Hangman Game")
        self.master.geometry("400x400")

        # List of words for the game
        self.words = ['python', 'hangman', 'programming', 'computer', 'keyboard', 'mouse', 'algorithm', 'variable']
        # Choose a random word from the list
        self.word = random.choice(self.words)
        # List to store guessed letters
        self.guessed_letters = []
        # Number of attempts allowed
        self.attempts = 6

        # Create a canvas to draw Hangman figure
        self.canvas = tk.Canvas(self.master, width=200, height=200)
        self.canvas.pack()

        # Label to display the word with blanks
        self.display_word_label = tk.Label(self.master, text=self.display_word())
        self.display_word_label.pack()

        # Label for the guess entry field
        self.guess_label = tk.Label(self.master, text="Guess a letter:")
        self.guess_label.pack()

        # Entry field for guessing letters
        self.guess_entry = tk.Entry(self.master)
        self.guess_entry.pack()

        # Button to submit the guess
        self.guess_button = tk.Button(self.master, text="Guess", command=self.make_guess)
        self.guess_button.pack()

    # Function to choose a word randomly from the list
    def choose_word(self):
        return random.choice(self.words)

    # Function to display the word with blanks for unguessed letters
    def display_word(self):
        displayed_word = ''
        for letter in self.word:
            if letter in self.guessed_letters:
                displayed_word += letter
            else:
                displayed_word += '_'
        return displayed_word

    # Function to draw Hangman figure based on attempts left
    def draw_hangman(self):
        if self.attempts == 5:
            self.canvas.create_line(10, 180, 90, 180)
        elif self.attempts == 4:
            self.canvas.create_line(50, 180, 50, 20)
        elif self.attempts == 3:
            self.canvas.create_line(50, 20, 100, 20)
        elif self.attempts == 2:
            self.canvas.create_line(100, 20, 100, 40)
        elif self.attempts == 1:
            self.canvas.create_oval(85, 40, 115, 70)
        elif self.attempts == 0:
            self.canvas.create_line(100, 70, 100, 120)
            self.canvas.create_line(100, 80, 85, 100)
            self.canvas.create_line(100, 80, 115, 100)
            self.canvas.create_line(100, 120, 85, 150)
            self.canvas.create_line(100, 120, 115, 150)

    # Function to handle the guess made by the player
    def make_guess(self):
        # Get the guess from the entry field
        guess = self.guess_entry.get().lower()
        self.guess_entry.delete(0, tk.END)

        # Validate the guess
        if len(guess) != 1 or not guess.isalpha():
            tk.messagebox.showerror("Invalid Guess", "Please enter a single letter.")
            return

        # Check if the guess has already been made
        if guess in self.guessed_letters:
            tk.messagebox.showerror("Already Guessed", "You've already guessed that letter.")
            return

        # Add the guess to the list of guessed letters
        self.guessed_letters.append(guess)

        # Check if the guess is correct
        if guess not in self.word:
            # Decrement attempts if the guess is incorrect
            self.attempts -= 1
            if self.attempts == 0:
                tk.messagebox.showinfo("Game Over", "You lost! The word was '{}'.".format(self.word))
                self.master.destroy()
            else:
                tk.messagebox.showwarning("Incorrect Guess", "Incorrect guess. You have {} attempts left.".format(self.attempts))
                # Update the displayed word and draw Hangman
                self.display_word_label.config(text=self.display_word())
                self.draw_hangman()
        else:
            # Check if all letters have been guessed correctly
            if '_' not in self.display_word():
                tk.messagebox.showinfo("Congratulations", "Congratulations! You guessed the word '{}'.".format(self.word))
                self.master.destroy()
            else:
                # Update the displayed word
                self.display_word_label.config(text=self.display_word())

# Main function to create and run the game
def main():
    root = tk.Tk()
    hangman_game = HangmanGame(root)
    root.mainloop()

if __name__ == "__main__":
    main()
